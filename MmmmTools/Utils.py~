## MmmmTools   -  Usability Improvements For Maya
## Copyright (C) <2008>  Joseph Crawford
##
## This file is part of MmmmTools.
##
## MmmmTools is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## MmmmTools is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
################################################
## More information is available:
## MmmmTools website - http://celestinestudios.com/mmmmtools
################################################

## Python doc string
"""MmmmToolsUtils - Common Simple Functions For Use In MmmmTools
"""

####################
## Imports
####################
import traceback
import os
import sys
import copy as Copy

import pymel.all as pm
import maya.cmds as cmds

import unipath

Unipath = unipath.Path



class Utils(object):
    logModeDefault = 'file'
    logImportanceDefault = 5
    logMinImportance = 10
    
    @classmethod
    def log( cls, *args, **kargs ):
        if kargs.setdefault( 'mode', cls.logModeDefault )=='print':
            if kargs.setdefault( 'importance', cls.logImportanceDefault ) \
                            >= cls.logMinImportance:
            for v in args:
                print( v )
            trc = traceback.format_exc()
            if trc != 'None\n':  ## The traceback module tacks
                                 ## a newline on format_exc
                print( "Traceback:")
                print( trc )
            

    @staticmethod
    def getMayaPath():
        appEnvFile = pm.about(env=True)
        pathstr, file = os.path.split(appEnvFile)
        upath = Unipath( pathstr ).absolute()
        pather = Pather( upath )
        return pather
        
    @staticmethod    
    def getMainWindowInfo():
        info = Duck()
        mw = pm.getMelGlobal('string', 'gMainWindow')
        ui = pm.PyUI( mw )
        setattr( info, 'mainWindowName', mw )
        setattr( info, 'mainWindow', ui )
        return info
        
    @staticmethod
    def newDuck():
        return Duck()
    
    @staticmethod
    def copyMemberRefsByName( source, target, names ):
        for v in names:
            try:
                target.__dict__[v] = source.__dict__[v]
            except:
                u.log( "Unable To Copy named member ref for name: " + str(v) )
                
        

    
        
class Pather(object):
    
    @property
    def st(self):
        return str(self)
    @property
    def str_(self):
        return str(self)
    
    def __init__(self, upath=None):
        if upath is None:
            self.upath = Unipath()
        else:
            self.upath = Unipath( upath )
            
    def __call__(self, string=True, absolute=True):
        return self.getPathname( string=string, absolute=absolute )
        
    def get(self):
        return self.upath()
        
    def set( self, upath ):
        self.upath = upath
        return self

    def getPathname( string=True, absolute=True ):
        """
            returns the entire file path and file name, can be used to access a file directly
            if string==True, return as string, else as path
            if absolute==True, return absolute path, else relative        
        """
        if absolute:
            upath = self.upath.absolute()
        else:
            upath = self.upath.relative()  ## does this even always work??? **** test this
        
        if string:
            return str(upath)
        else:
            return upath
            
    def makeAbsolute(self):
        self.upath = self.upath.absolute()
        return self
        
    def __add__(self, other ):
        #Utils.log( 'Adding paths::::' )
        #Utils.log( 'Self upath is:' )
        #Utils.log( self.upath )
        #Utils.log( 'Other is:' )
        #Utils.log( other )
        #Utils.log( "Other's type is:" )
        #Utils.log( type(other) )
        
    
        new_pather = Copy.deepcopy( self )
        if isinstance( other, Pather ):
            new_pather.upath = Unipath(self.upath, other.upath)
        elif isinstance( other, Unipath ):
            if other.isabsolute():
                assert 1==0
            else:
                new_pather.upath = Unipath(self.upath, other)                
        elif isinstance( other, str ) or isinstance( other, unicode ):
            other = str(other)
            o_upath = Unipath( other )
            #Utils.log( "Other as unipath - o_upath is:" )
            #Utils.log( o_upath )
            new_pather.upath = Unipath( self.upath, o_upath)
        else:
            assert 1 == 0
        #Utils.log( "New combined path is:" )
        #Utils.log( new_pather.upath )
        
        #Utils.log( "New pather upath is:" )
        #Utils.log( new_pather.upath )
        #Utils.log( "New pather upath's type is:" )
        #Utils.log( type(new_pather.upath) )
        return new_pather    
        
        
    def __str__(self):
        return str( self.upath.absolute() )
        
    def str(self):
        return str(self)
        
    def repr(self):
        return( "Pather('" + str(self) + "')" )
        
    
        

class Duck(object):
    """
    A mostly empty class that is just used for organization.
    To store various variable in it's __dict__
    We can't use object directly, so we need to make something that
    inherits from it.
    """
    pass        
        
    


        
        