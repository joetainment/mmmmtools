## MmmmTools   -  Usability Improvements For Maya
## Copyright (C) <2008>  Joseph Crawford
##
## This file is part of MmmmTools.
##
## MmmmTools is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## MmmmTools is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
################################################
## More information is available:
## MmmmTools website - http://celestinestudios.com/mmmmtools
################################################



import maya.cmds as cmds
import maya.mel
import pymel.all as pm
import sys, os, shutil

from Utils import Utils
from Utils import Pather

class Env(object):
    def __init__(self, parent ):
        ##Init reference to parent and to configuration
        self.parent = parent
        self.mmmm = self.parent
        self.pman = self.mmmm.platformManager
        self.ini = self.parent.ini
        self.conf = self.ini.conf

        ##set variables to known values
        
        self.setupSystemPaths()

        self.setupScriptPaths()
        """
        self.sourcePopularMelScripts()
            ##This should get moved into an autoscript module

        self.makeRoadKillPath()
        self.tryGoZSource()
        
        try:
            self.makeAutoHotkeyPath()        
        except:
            print( "Env.Env.__init__.makeAutoHotkeyPath()  failed " )
            print( traceback.format_exc() )
        """
    
    def setupSystemPaths(self):
        env_path = self.pman.info.maya.maya_env_path_str
        
        ## Add roadkill path to maya's path where it tries to run bins from
        roadkill_pather = self.pman.info.mmmm.mmmm_pather + self.conf.roadkill_dir
        
        new_env_path = env_path + roadkill_pather.st
        
        pm.mel.eval( 'putenv "PATH" ' + '"' + new_env_path + '"' + ';')
        self.pman.info.maya.maya_env_path_str = new_env_path
        
        
    def setupScriptPaths(self):
        paths_str = pm.mel.eval('getenv "MAYA_SCRIPT_PATH";')
        
        subscripts_str = self.mmmm.ini.conf.subscripts_str
        subscriptsDownloaded_str = self.mmmm.ini.conf.subscriptsDownloaded_str
        autoscripts_str = self.mmmm.ini.conf.autoscripts_str
        
        ##The paths below are made and kept as pathers, not strings!
        p_mmmm = self.pman.info.mmmm_pather  ## The mmmm_pather is supposed to already be absolute
        p_subscripts = p_mmmm + subscripts_str
        p_subscripts_downloaded = p_mmmm + subscriptsDownloaded_str
        p_autoscripts = p_mmmm + autoscripts_str
        
        mList = [ ]
        mListStr = (
            paths_str + ';' +
            p_mmmm.st + ';' +
            p_subscripts.st + ';'  +
            p_subscripts_downloaded.st + ';' +
            p_autoscripts.st + ';'
            )
        
        try:
            for f in os.listdir( p_subscripts.st ):
                
                #make a full path name for this file
                ff = p_subscripts + f
                
                if os.path.isdir( ff.st ):
                    mList.append(ff)
                    mListStr = mListStr + ff.st + ';'
        except:
            print("\n No subscripts folder was found.\n")
            
        try:
            for f in os.listdir( p_subscripts_downloaded.st ):
                
                #make a full path name for this file
                ff = p_subscripts_downloaded + f
                
                if os.path.isdir( ff.st ):
                    mList.append( ff )
                    mListStr = mListStr + ff.st + ';'
        except:
            print("\n No subscripts folder was found.\n")
        
        print("\n\n\n\n\n\n" + p_autoscripts.st + "\n\n")
        
        try:
            for f in os.listdir(p_autoscripts.st):
                #make a full path name for this file
                ff = p_autoscripts + f
                
                if os.path.isdir(ff.st):
                    mList.append(ff)
                    mListStr = mListStr + ff.st + ';'
        except:
            print("\n No autoscripts folder was found.\n")

        
        ## **** Add code here to loop through each immediate subfolder of the subscripts path, and consider writing something to loop through each of their user setups
        pm.mel.eval( 'putenv "MAYA_SCRIPT_PATH" ' + '"' + mListStr + '"' + ';')
        
        ## We need to rehash the script path, otherwise mel won't find the newly added paths
        pm.mel.eval('rehash;')
        
        ## Run the user setup files from all the folder in mList, which should be the subscripts and autoscripts
        for d in mList:
            p_userSetup = d + self.mmmm.ini.conf.userSetup_str
            if os.path.isfile(p_userSetup.st):
                try:
                    maya.mel.eval( 'source "' + userSetupFile.st + '"' + ';' )
                except:
                    pass
        
        ## **** These words "subscripts" and subscriptsDownloaded should be specified in conf
        ## to avoid hardcoded stuff in other places
        self.pman.info.mmmm.subscripts_path = self.pman.info.mmmm.mmmm_pather + subscripts_str
        self.pman.info.mmmm.subscripts_downloaded_path = self.pman.info.mmmm.mmmm_pather + subscriptsDownloaded_str

        ## **** The names here (above) are inconsistent, and should be better thought out, and changed later.
    
    def getMayaPath(self):
        appEnvFile = cmds.about(env=True)
        path, file = os.path.split(appEnvFile)
        return path

    def makeRoadKillPath(self):
        self.conf.roadkill_path_absolute = self.conf.script_path + "/" + self.conf.roadkill_path
        pm.mel.eval( 'putenv "roadkill_path_absolute" ' + '"' + self.conf.roadkill_path_absolute + '"' + ';' )
        pm.mel.eval( 'global string $gRoadKillPath = "' + self.conf.roadkill_path_absolute +  '";')
        
 
    def makeAutoHotkeyPath(self):
        self.conf.autohotkey_path_absolute = self.conf.script_path + "/" + self.conf.autohotkey_path
        pm.mel.eval( 'putenv "autohotkey_path_absolute" ' + '"' + self.conf.autohotkey_path_absolute + '"' + ';' )
        pm.mel.eval( 'global string $gAutoHotkeyPath = "' + self.conf.autohotkey_path_absolute +  '";')
        
        q = '\\"'
        
        c1 = 'system("start '
        c2 = self.conf.autohotkey_path_absolute
        c2a = "/"
        c2b = self.conf.autohotkey_exe
        c3 = ' '
        c4 = q+c2+c2a
        c4a = self.conf.autohotkey_script 
        c4b = q
        c5 = '");'
        
        command = c1+c2+c2a+c2b+c3+c4+c4a+c4b+c5
        
        self.conf.autohotkey_command = command
        
        try:
            pm.mel.eval( 'putenv "autohotkey_command" ' + '"' + self.conf.autohotkey_path + '/' + self.conf.autohotkey_exe + '"' + ';' )
        except:
            pass
        
    def sourcePopularMelScripts(self):
        try:
            maya.mel.eval('source "HKLocalTools.mel";')
        except:
            pass
    
    def tryGoZSource(self):
        try:
            maya.mel.eval('source "GoZScript.mel";')
        except:
            print( """
                Did not source GoZ script.  This most likely means it is not installed.
                If you are a ZBrush user, you may need to use the GoZ button in ZBrush
                to install the GoZ Maya script."""  )